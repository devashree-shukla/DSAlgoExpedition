func knapSack(W: Int, wt: [Int], val: [Int], n: Int) -> Int {
    var K = Array(repeating: Array(repeating: 0, count: W + 1), count: n + 1)

    for i in 0...n {
        for w in 0...W {
            if i == 0 || w == 0 {
                K[i][w] = 0
            } else if wt[i-1] <= w {
                K[i][w] = max(val[i-1] + K[i-1][w-wt[i-1]], K[i-1][w])
            } else {
                K[i][w] = K[i-1][w]
            }
        }
    }

    return K[n][W]
}
